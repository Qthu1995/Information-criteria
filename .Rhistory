reg.rmse[j,1] <- sqrt(mean((reg.preds[,1]-y.calc)^2))
reg.best <- step(reg.model,trace=0,k=log(n))
reg.preds[,2] <- predict(reg.best,newdata=newdata,type="response")
reg.rmse[j,2] <- sqrt(mean((reg.preds[,2]-y.calc)^2))
}
results[results$samples==nsamples[i]&results$criterion=="AIC", 3] <- mean(reg.rmse[,1])
results[results$samples==nsamples[i]&results$criterion=="BIC", 3] <- mean(reg.rmse[,2])
}
return(results)
}
strong1 <- simulation.data(alpha=3, beta=3, nX=10, Xin.or.out=c(rep(TRUE,5),rep(FALSE,5)))
tapering1 <- simulation.data(alpha=3,beta=exp(seq(log(3),log(0.003),length=21)),
nX=21, Xin.or.out=c(rep(c(TRUE,rep(FALSE,4)),4),TRUE))
strong1.plot <-  ggplot(data= strong1,
aes(x=samples, y=values, group=as.factor(criterion), color=criterion)) +
geom_line()+ geom_point() +
theme_bw()+ xlab("Sample size")+ ylab("")
tapering1.plot <-  ggplot(data= tapering1,
aes(x=samples, y=values, group=as.factor(criterion), color=criterion)) +
geom_line()+ geom_point() +
theme_bw()+ xlab("Sample size")+ ylab("")
strong1.plot
strong1
c(20:100, 5)
seq(5, 20, 5)
simulation.data <- function(nsims=10, nsamples=sep(10, 180, 8), alpha=0,
beta=0, nX=10, meanX=0, Xin.or.out=rep(TRUE,nX), XCov=diag(nX)){
n.sample.sizes <- length(nsamples)
criteria <- c("AIC","BIC")
ncriteria <- length(criteria)
if(length(beta)==1){
beta <- rep(beta,nX)
}
results <- data.frame(samples=rep(nsamples, times=2),
criterion=c(rep("AIC",n.sample.sizes), rep("BIC",n.sample.sizes)),
values=numeric(n.sample.sizes*2))
for(i in 1:n.sample.sizes){
n <- nsamples[i]
all.x.names <- paste("x.",1:nX,sep="")
x.names <- all.x.names[Xin.or.out]
reg.rmse <- array(NA, dim=c(nsims,ncriteria))
colnames(reg.rmse) <- criteria
reg.preds <- array(NA,dim=c(n,ncriteria))
for(j in 1:nsims){
#generate "true" response
#j <- 1
x <- mvrnorm(n=n,mu=rep(0,nX),Sigma=XCov)
alpha.sim <- rnorm(1,alpha,0)
beta.sim <- beta
epsilon <- rnorm(n,0,1)
y <- as.numeric(alpha.sim+x%*%beta.sim+epsilon)
reg.data <- data.frame(y=y,x=x)
reg.eqn <- as.formula(paste("y",paste("",x.names,sep="",collapse="+"),sep="~"))
reg.model <- lm(reg.eqn,data=reg.data)
#Get second, test set
x.new <- mvrnorm(n=n,rep(0,nX),Sigma=XCov)
alpha.sim <- rnorm(1,alpha,0)
beta.sim <- beta
epsilon.new <- rnorm(n,0,1)
y.new <- as.numeric(alpha.sim+x.new%*%beta.sim+epsilon.new)
newdata <- data.frame(x=x.new)
y.calc <- y.new
reg.best <- step(reg.model,trace=0, k=2)
reg.preds[,1] <- predict(reg.best,newdata=newdata,type="response")
reg.rmse[j,1] <- sqrt(mean((reg.preds[,1]-y.calc)^2))
reg.best <- step(reg.model,trace=0,k=log(n))
reg.preds[,2] <- predict(reg.best,newdata=newdata,type="response")
reg.rmse[j,2] <- sqrt(mean((reg.preds[,2]-y.calc)^2))
}
results[results$samples==nsamples[i]&results$criterion=="AIC", 3] <- mean(reg.rmse[,1])
results[results$samples==nsamples[i]&results$criterion=="BIC", 3] <- mean(reg.rmse[,2])
}
return(results)
}
strong1 <- simulation.data(alpha=3, beta=3, nX=10, Xin.or.out=c(rep(TRUE,5),rep(FALSE,5)))
tapering1 <- simulation.data(alpha=3,beta=exp(seq(log(3),log(0.003),length=21)),
nX=21, Xin.or.out=c(rep(c(TRUE,rep(FALSE,4)),4),TRUE))
strong1.plot <-  ggplot(data= strong1,
aes(x=samples, y=values, group=as.factor(criterion), color=criterion)) +
geom_line()+ geom_point() +
theme_bw()+ xlab("Sample size")+ ylab("")
simulation.data <- function(nsims=10, nsamples=seq(10, 180, 8), alpha=0,
beta=0, nX=10, meanX=0, Xin.or.out=rep(TRUE,nX), XCov=diag(nX)){
n.sample.sizes <- length(nsamples)
criteria <- c("AIC","BIC")
ncriteria <- length(criteria)
if(length(beta)==1){
beta <- rep(beta,nX)
}
results <- data.frame(samples=rep(nsamples, times=2),
criterion=c(rep("AIC",n.sample.sizes), rep("BIC",n.sample.sizes)),
values=numeric(n.sample.sizes*2))
for(i in 1:n.sample.sizes){
n <- nsamples[i]
all.x.names <- paste("x.",1:nX,sep="")
x.names <- all.x.names[Xin.or.out]
reg.rmse <- array(NA, dim=c(nsims,ncriteria))
colnames(reg.rmse) <- criteria
reg.preds <- array(NA,dim=c(n,ncriteria))
for(j in 1:nsims){
#generate "true" response
#j <- 1
x <- mvrnorm(n=n,mu=rep(0,nX),Sigma=XCov)
alpha.sim <- rnorm(1,alpha,0)
beta.sim <- beta
epsilon <- rnorm(n,0,1)
y <- as.numeric(alpha.sim+x%*%beta.sim+epsilon)
reg.data <- data.frame(y=y,x=x)
reg.eqn <- as.formula(paste("y",paste("",x.names,sep="",collapse="+"),sep="~"))
reg.model <- lm(reg.eqn,data=reg.data)
#Get second, test set
x.new <- mvrnorm(n=n,rep(0,nX),Sigma=XCov)
alpha.sim <- rnorm(1,alpha,0)
beta.sim <- beta
epsilon.new <- rnorm(n,0,1)
y.new <- as.numeric(alpha.sim+x.new%*%beta.sim+epsilon.new)
newdata <- data.frame(x=x.new)
y.calc <- y.new
reg.best <- step(reg.model,trace=0, k=2)
reg.preds[,1] <- predict(reg.best,newdata=newdata,type="response")
reg.rmse[j,1] <- sqrt(mean((reg.preds[,1]-y.calc)^2))
reg.best <- step(reg.model,trace=0,k=log(n))
reg.preds[,2] <- predict(reg.best,newdata=newdata,type="response")
reg.rmse[j,2] <- sqrt(mean((reg.preds[,2]-y.calc)^2))
}
results[results$samples==nsamples[i]&results$criterion=="AIC", 3] <- mean(reg.rmse[,1])
results[results$samples==nsamples[i]&results$criterion=="BIC", 3] <- mean(reg.rmse[,2])
}
return(results)
}
strong1 <- simulation.data(alpha=3, beta=3, nX=10, Xin.or.out=c(rep(TRUE,5),rep(FALSE,5)))
tapering1 <- simulation.data(alpha=3,beta=exp(seq(log(3),log(0.003),length=21)),
nX=21, Xin.or.out=c(rep(c(TRUE,rep(FALSE,4)),4),TRUE))
strong1.plot <-  ggplot(data= strong1,
aes(x=samples, y=values, group=as.factor(criterion), color=criterion)) +
geom_line()+ geom_point() +
theme_bw()+ xlab("Sample size")+ ylab("")
tapering1.plot <-  ggplot(data= tapering1,
aes(x=samples, y=values, group=as.factor(criterion), color=criterion)) +
geom_line()+ geom_point() +
theme_bw()+ xlab("Sample size")+ ylab("")
strong1.plot
tapering1.plot
simulation.data <- function(nsims=10, nsamples=seq(10, 150, 5), alpha=0,
beta=0, nX=10, meanX=0, Xin.or.out=rep(TRUE,nX), XCov=diag(nX)){
n.sample.sizes <- length(nsamples)
criteria <- c("AIC","BIC")
ncriteria <- length(criteria)
if(length(beta)==1){
beta <- rep(beta,nX)
}
results <- data.frame(samples=rep(nsamples, times=2),
criterion=c(rep("AIC",n.sample.sizes), rep("BIC",n.sample.sizes)),
values=numeric(n.sample.sizes*2))
for(i in 1:n.sample.sizes){
n <- nsamples[i]
all.x.names <- paste("x.",1:nX,sep="")
x.names <- all.x.names[Xin.or.out]
reg.rmse <- array(NA, dim=c(nsims,ncriteria))
colnames(reg.rmse) <- criteria
reg.preds <- array(NA,dim=c(n,ncriteria))
for(j in 1:nsims){
#generate "true" response
#j <- 1
x <- mvrnorm(n=n,mu=rep(0,nX),Sigma=XCov)
alpha.sim <- rnorm(1,alpha,0)
beta.sim <- beta
epsilon <- rnorm(n,0,1)
y <- as.numeric(alpha.sim+x%*%beta.sim+epsilon)
reg.data <- data.frame(y=y,x=x)
reg.eqn <- as.formula(paste("y",paste("",x.names,sep="",collapse="+"),sep="~"))
reg.model <- lm(reg.eqn,data=reg.data)
#Get second, test set
x.new <- mvrnorm(n=n,rep(0,nX),Sigma=XCov)
alpha.sim <- rnorm(1,alpha,0)
beta.sim <- beta
epsilon.new <- rnorm(n,0,1)
y.new <- as.numeric(alpha.sim+x.new%*%beta.sim+epsilon.new)
newdata <- data.frame(x=x.new)
y.calc <- y.new
reg.best <- step(reg.model,trace=0, k=2)
reg.preds[,1] <- predict(reg.best,newdata=newdata,type="response")
reg.rmse[j,1] <- sqrt(mean((reg.preds[,1]-y.calc)^2))
reg.best <- step(reg.model,trace=0,k=log(n))
reg.preds[,2] <- predict(reg.best,newdata=newdata,type="response")
reg.rmse[j,2] <- sqrt(mean((reg.preds[,2]-y.calc)^2))
}
results[results$samples==nsamples[i]&results$criterion=="AIC", 3] <- mean(reg.rmse[,1])
results[results$samples==nsamples[i]&results$criterion=="BIC", 3] <- mean(reg.rmse[,2])
}
return(results)
}
strong1 <- simulation.data(alpha=3, beta=3, nX=10, Xin.or.out=c(rep(TRUE,5),rep(FALSE,5)))
tapering1 <- simulation.data(alpha=3,beta=exp(seq(log(3),log(0.003),length=21)),
nX=21, Xin.or.out=c(rep(c(TRUE,rep(FALSE,4)),4),TRUE))
strong1.plot <-  ggplot(data= strong1,
aes(x=samples, y=values, group=as.factor(criterion), color=criterion)) +
geom_line()+ geom_point() +
theme_bw()+ xlab("Sample size")+ ylab("")
tapering1.plot <-  ggplot(data= tapering1,
aes(x=samples, y=values, group=as.factor(criterion), color=criterion)) +
geom_line()+ geom_point() +
theme_bw()+ xlab("Sample size")+ ylab("")
strong1.plot
tapering1.plot
XCov <- matrix(rep(0.5, 10*10), ncol=10)
diag(XCov) <- 1
strong2 <- simulation.data(alpha=3, beta=3, nX=10, Xin.or.out=c(rep(TRUE,5),rep(FALSE,5)), XCov=XCov)
XCov <- matrix(rep(0.5, 21*21), ncol=21)
diag(XCov) <- 1
tapering2 <- simulation.data(alpha=3, beta=exp(seq(log(3),log(0.005),length=21)),
nX=21, Xin.or.out=c(rep(c(TRUE,rep(FALSE,4)),4),TRUE), XCov=XCov)
strong2.plot <-  ggplot(data= strong2,
aes(x=samples, y=values, group=as.factor(criterion), color=criterion)) +
geom_line()+ geom_point() +
theme_bw()+ xlab("Sample size")+ ylab("")
tapering2.plot <-  ggplot(data= tapering2,
aes(x=samples, y=values, group=as.factor(criterion), color=criterion)) +
geom_line()+ geom_point() +
theme_bw()+ xlab("Sample size")+ ylab("")
strong2.plot
tapering2.plot
exp(seq(log(3),log(0.005),length=21)
)
library(mvtnorm)
library(MASS)
library(ggplot2)
library(dplyr)
simulation.data <- function(nsims=10, nsamples=seq(10, 150, 5), alpha=0,
beta=0, nX=10, meanX=0, Xin.or.out=rep(TRUE,nX), XCov=diag(nX)){
n.sample.sizes <- length(nsamples)
criteria <- c("AIC","BIC")
ncriteria <- length(criteria)
if(length(beta)==1){
beta <- rep(beta,nX)
}
results <- data.frame(samples=rep(nsamples, times=2),
criterion=c(rep("AIC",n.sample.sizes), rep("BIC",n.sample.sizes)),
values=numeric(n.sample.sizes*2))
for(i in 1:n.sample.sizes){
n <- nsamples[i]
all.x.names <- paste("x.",1:nX,sep="")
x.names <- all.x.names[Xin.or.out]
reg.rmse <- array(NA, dim=c(nsims,ncriteria))
colnames(reg.rmse) <- criteria
reg.preds <- array(NA,dim=c(n,ncriteria))
for(j in 1:nsims){
#generate "true" response
#j <- 1
x <- mvrnorm(n=n,mu=rep(0,nX),Sigma=XCov)
alpha.sim <- rnorm(1,alpha,0)
beta.sim <- beta
epsilon <- rnorm(n,0,1)
y <- as.numeric(alpha.sim+x%*%beta.sim+epsilon)
reg.data <- data.frame(y=y,x=x)
reg.eqn <- as.formula(paste("y",paste("",x.names,sep="",collapse="+"),sep="~"))
reg.model <- lm(reg.eqn,data=reg.data)
#Get second, test set
x.new <- mvrnorm(n=n,rep(0,nX),Sigma=XCov)
alpha.sim <- rnorm(1,alpha,0)
beta.sim <- beta
epsilon.new <- rnorm(n,0,1)
y.new <- as.numeric(alpha.sim+x.new%*%beta.sim+epsilon.new)
newdata <- data.frame(x=x.new)
y.calc <- y.new
reg.best <- step(reg.model,trace=0, k=2)
reg.preds[,1] <- predict(reg.best,newdata=newdata,type="response")
reg.rmse[j,1] <- sqrt(mean((reg.preds[,1]-y.calc)^2))
reg.best <- step(reg.model,trace=0,k=log(n))
reg.preds[,2] <- predict(reg.best,newdata=newdata,type="response")
reg.rmse[j,2] <- sqrt(mean((reg.preds[,2]-y.calc)^2))
}
results[results$samples==nsamples[i]&results$criterion=="AIC", 3] <- mean(reg.rmse[,1])
results[results$samples==nsamples[i]&results$criterion=="BIC", 3] <- mean(reg.rmse[,2])
}
return(results)
}
strong1 <- simulation.data(alpha=3, beta=3, nX=10, Xin.or.out=c(rep(TRUE,5),rep(FALSE,5)))
tapering1 <- simulation.data(alpha=3,beta=exp(seq(log(3),log(0.003),length=21)),
nX=21, Xin.or.out=c(rep(c(TRUE,rep(FALSE,4)),4),TRUE))
strong1.plot <-  ggplot(data= strong1,
aes(x=samples, y=values, group=as.factor(criterion), color=criterion)) +
geom_line()+ geom_point() +
theme_bw()+ xlab("Sample size")+ ylab("")
tapering1.plot <-  ggplot(data= tapering1,
aes(x=samples, y=values, group=as.factor(criterion), color=criterion)) +
geom_line()+ geom_point() +
theme_bw()+ xlab("Sample size")+ ylab("")
strong1.plot
tapering1.plot
XCov <- matrix(rep(0.5, 10*10), ncol=10)
diag(XCov) <- 1
strong2 <- simulation.data(alpha=3, beta=3, nX=10, Xin.or.out=c(rep(TRUE,5),rep(FALSE,5)), XCov=XCov)
XCov <- matrix(rep(0.5, 21*21), ncol=21)
diag(XCov) <- 1
tapering2 <- simulation.data(alpha=3, beta=exp(seq(log(3),log(0.005),length=21)),
nX=21, Xin.or.out=c(rep(c(TRUE,rep(FALSE,4)),4),TRUE), XCov=XCov)
strong2.plot <-  ggplot(data= strong2,
aes(x=samples, y=values, group=as.factor(criterion), color=criterion)) +
geom_line()+ geom_point() +
theme_bw()+ xlab("Sample size")+ ylab("")
tapering2.plot <-  ggplot(data= tapering2,
aes(x=samples, y=values, group=as.factor(criterion), color=criterion)) +
geom_line()+ geom_point() +
theme_bw()+ xlab("Sample size")+ ylab("")
strong2.plot
tapering2.plot
library(mvtnorm)
library(MASS)
library(ggplot2)
library(dplyr)
simulation.data <- function(nsims=50, nsamples=seq(10, 150, 5), alpha=0,
beta=0, nX=10, meanX=0, Xin.or.out=rep(TRUE,nX), XCov=diag(nX)){
n.sample.sizes <- length(nsamples)
criteria <- c("AIC","BIC")
ncriteria <- length(criteria)
if(length(beta)==1){
beta <- rep(beta,nX)
}
results <- data.frame(samples=rep(nsamples, times=2),
criterion=c(rep("AIC",n.sample.sizes), rep("BIC",n.sample.sizes)),
values=numeric(n.sample.sizes*2))
for(i in 1:n.sample.sizes){
n <- nsamples[i]
all.x.names <- paste("x.",1:nX,sep="")
x.names <- all.x.names[Xin.or.out]
reg.rmse <- array(NA, dim=c(nsims,ncriteria))
colnames(reg.rmse) <- criteria
reg.preds <- array(NA,dim=c(n,ncriteria))
for(j in 1:nsims){
#generate "true" response
#j <- 1
x <- mvrnorm(n=n,mu=rep(0,nX),Sigma=XCov)
alpha.sim <- rnorm(1,alpha,0)
beta.sim <- beta
epsilon <- rnorm(n,0,1)
y <- as.numeric(alpha.sim+x%*%beta.sim+epsilon)
reg.data <- data.frame(y=y,x=x)
reg.eqn <- as.formula(paste("y",paste("",x.names,sep="",collapse="+"),sep="~"))
reg.model <- lm(reg.eqn,data=reg.data)
#Get second, test set
x.new <- mvrnorm(n=n,rep(0,nX),Sigma=XCov)
alpha.sim <- rnorm(1,alpha,0)
beta.sim <- beta
epsilon.new <- rnorm(n,0,1)
y.new <- as.numeric(alpha.sim+x.new%*%beta.sim+epsilon.new)
newdata <- data.frame(x=x.new)
y.calc <- y.new
reg.best <- step(reg.model,trace=0, k=2)
reg.preds[,1] <- predict(reg.best,newdata=newdata,type="response")
reg.rmse[j,1] <- sqrt(mean((reg.preds[,1]-y.calc)^2))
reg.best <- step(reg.model,trace=0,k=log(n))
reg.preds[,2] <- predict(reg.best,newdata=newdata,type="response")
reg.rmse[j,2] <- sqrt(mean((reg.preds[,2]-y.calc)^2))
}
results[results$samples==nsamples[i]&results$criterion=="AIC", 3] <- mean(reg.rmse[,1])
results[results$samples==nsamples[i]&results$criterion=="BIC", 3] <- mean(reg.rmse[,2])
}
return(results)
}
strong1 <- simulation.data(alpha=3, beta=3, nX=10, Xin.or.out=c(rep(TRUE,5),rep(FALSE,5)))
tapering1 <- simulation.data(alpha=3,beta=exp(seq(log(3),log(0.003),length=21)),
nX=21, Xin.or.out=c(rep(c(TRUE,rep(FALSE,4)),4),TRUE))
strong1.plot <-  ggplot(data= strong1,
aes(x=samples, y=values, group=as.factor(criterion), color=criterion)) +
geom_line()+ geom_point() +
theme_bw()+ xlab("Sample size")+ ylab("")
tapering1.plot <-  ggplot(data= tapering1,
aes(x=samples, y=values, group=as.factor(criterion), color=criterion)) +
geom_line()+ geom_point() +
theme_bw()+ xlab("Sample size")+ ylab("")
strong1.plot
tapering1.plot
XCov <- matrix(rep(0.5, 10*10), ncol=10)
diag(XCov) <- 1
strong2 <- simulation.data(alpha=3, beta=3, nX=10, Xin.or.out=c(rep(TRUE,5),rep(FALSE,5)), XCov=XCov)
XCov <- matrix(rep(0.5, 21*21), ncol=21)
diag(XCov) <- 1
tapering2 <- simulation.data(alpha=3, beta=exp(seq(log(3),log(0.005),length=21)),
nX=21, Xin.or.out=c(rep(c(TRUE,rep(FALSE,4)),4),TRUE), XCov=XCov)
strong2.plot <-  ggplot(data= strong2,
aes(x=samples, y=values, group=as.factor(criterion), color=criterion)) +
geom_line()+ geom_point() +
theme_bw()+ xlab("Sample size")+ ylab("")
tapering2.plot <-  ggplot(data= tapering2,
aes(x=samples, y=values, group=as.factor(criterion), color=criterion)) +
geom_line()+ geom_point() +
theme_bw()+ xlab("Sample size")+ ylab("")
strong2.plot
tapering2.plot
install.packages("psych")
library(psych)
#Remove rows with missing values and keep only complete cases
bfi_data=bfi_data[complete.cases(bfi_data),]
#Create the correlation matrix from bfi_data
bfi_cor <- cor(bfi_data)
#Factor analysis of the data
factors_data <- fa(r = bfi_cor, nfactors = 6)
#Getting the factor loadings and model analysis
factors_data
#Loading the dataset
bfi_data=bfi
#Remove rows with missing values and keep only complete cases
bfi_data=bfi_data[complete.cases(bfi_data),]
#Create the correlation matrix from bfi_data
bfi_cor <- cor(bfi_data)
#Factor analysis of the data
factors_data <- fa(r = bfi_cor, nfactors = 6)
#Getting the factor loadings and model analysis
factors_data
library(ggplot2)
library(readr)
#install.packages("dplyr")
library(dplyr)
library(StepReg)
#install.packages("StepReg")
library(mvtnorm)
library(MASS)
#setwd("C:/Users/Thu Beo/Desktop/diploma/practice/Final/Final_submit")
#############################################################################################
#############################################################################################
bodyfat <- read.table('fat.data.txt', header = FALSE,
col.names = c("case", "brozek", "siri",
"density", "age", "weight_lbs", "height_in",
"bmi", "fat_free_weight", "neck_cm", "chest_cm",
"abdomen_cm", "hip_cm", "thigh_cm", "knee_cm", "ankle_cm",
"biceps_cm", "forearm_cm", "wrist_cm"))
attach(bodyfat)
head(bodyfat)
library(ggplot2)
library(readr)
#install.packages("dplyr")
library(dplyr)
library(StepReg)
#install.packages("StepReg")
library(mvtnorm)
library(MASS)
setwd("C:/Users/Thu Beo/Desktop/diploma/practice/Final/Final_submit")
#############################################################################################
#############################################################################################
bodyfat <- read.table('fat.data.txt', header = FALSE,
col.names = c("case", "brozek", "siri",
"density", "age", "weight_lbs", "height_in",
"bmi", "fat_free_weight", "neck_cm", "chest_cm",
"abdomen_cm", "hip_cm", "thigh_cm", "knee_cm", "ankle_cm",
"biceps_cm", "forearm_cm", "wrist_cm"))
attach(bodyfat)
library(ggplot2)
library(readr)
#install.packages("dplyr")
library(dplyr)
library(StepReg)
#install.packages("StepReg")
library(mvtnorm)
library(MASS)
setwd("C:/Users/Thu Beo/Desktop/diploma/practice/Final/Final_submit")
#############################################################################################
#############################################################################################
bodyfat <- read.table('fat.data.txt', header = FALSE,
col.names = c("case", "brozek", "siri",
"density", "age", "weight_lbs", "height_in",
"bmi", "fat_free_weight", "neck_cm", "chest_cm",
"abdomen_cm", "hip_cm", "thigh_cm", "knee_cm", "ankle_cm",
"biceps_cm", "forearm_cm", "wrist_cm"))
attach(bodyfat)
head(bodyfat)
library(ggplot2)
library(readr)
#install.packages("dplyr")
library(dplyr)
library(StepReg)
#install.packages("StepReg")
library(mvtnorm)
library(MASS)
setwd("C:/Users/Thu Beo/Desktop/diploma/practice/Final_submit")
#############################################################################################
#############################################################################################
bodyfat <- read.table('fat.data.txt', header = FALSE,
col.names = c("case", "brozek", "siri",
"density", "age", "weight_lbs", "height_in",
"bmi", "fat_free_weight", "neck_cm", "chest_cm",
"abdomen_cm", "hip_cm", "thigh_cm", "knee_cm", "ankle_cm",
"biceps_cm", "forearm_cm", "wrist_cm"))
attach(bodyfat)
head(bodyfat)
library(ggplot2)
library(readr)
#install.packages("dplyr")
library(dplyr)
library(StepReg)
#install.packages("StepReg")
library(mvtnorm)
library(MASS)
setwd("C:/Users/Thu Beo/Desktop/diploma/Final_submit")
#############################################################################################
#############################################################################################
bodyfat <- read.table('fat.data.txt', header = FALSE,
col.names = c("case", "brozek", "siri",
"density", "age", "weight_lbs", "height_in",
"bmi", "fat_free_weight", "neck_cm", "chest_cm",
"abdomen_cm", "hip_cm", "thigh_cm", "knee_cm", "ankle_cm",
"biceps_cm", "forearm_cm", "wrist_cm"))
attach(bodyfat)
head(bodyfat)
head(bodyfat[, 1:10])
head(bodyfat[, 3:13])
head(bodyfat[, 4:13])
Y <- 1/bodyfat$density #Take the response variable as y = 1/D; D is measured body density
Y <- 1/bodyfat$density #Take the response variable as y = 1/D; D is measured body density
new.df <- data.frame(Y, bodyfat[, 5:13])
new.df
head(bodyfat[, 4:13])
